<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfpay.airscape.server.dao.AppDependencesDao">
	<resultMap id="appDependencesMap" type="com.sfpay.airscape.server.vo.AppDependences">
		<id column="DEPENDENCE_ID" property="dependenceId" />
		<result column="GROUP_ID" property="groupId" />
		<result column="ARTIFACT_ID" property="artifactId" />
		<result column="VERSION" property="version" />
		<result column="DEPEN_GROUP_ID" property="depenGroupId" />
		<result column="DEPEN_ARTIFACT_ID" property="depenArtifactId" />
		<result column="DEPEN_VERSION" property="depenVersion" />
		<result column="PACKAGING" property="packaging" />
		<result column="ROLE" property="role" />
		<result column="MANUAL_ROLE" property="manualRole" />
		<result column="STATUS" property="status" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="UPDATE_TIME" property="updateTime" />
	</resultMap>
	<parameterMap type="com.sfpay.airscape.server.vo.AppDependences"
		id="appDependences" />
	
	<select id="query" resultMap="appDependencesMap" parameterMap="appDependences">
		SELECT * from
		T_APP_DEPENDENCES 
		WHERE 
		GROUP_ID = #{groupId} 
		AND 
		ARTIFACT_ID = #{artifactId} 
		AND 
		VERSION = #{version} 
		AND 
		DEPEN_GROUP_ID = #{depenGroupId} 
		AND 
		DEPEN_ARTIFACT_ID = #{depenArtifactId} 
		AND 
		DEPEN_VERSION = #{depenVersion}
	</select>
	
	
	<select id="queryComsumer" resultMap="appDependencesMap" parameterType="String">
		SELECT b.dependence_id, b.ARTIFACT_ID,b.GROUP_ID,b.VERSION, b.DEPEN_ARTIFACT_ID,b.DEPEN_GROUP_ID,b.DEPEN_VERSION,b.role from 
		(
		SELECT a.dependence_id as dependence_id, a.ARTIFACT_ID as ARTIFACT_ID,a.GROUP_ID,a.VERSION,
		a.DEPEN_ARTIFACT_ID  as DEPEN_ARTIFACT_ID,a.DEPEN_GROUP_ID,a.DEPEN_VERSION
		 ,if(a.manual_role is null,a.role,a.manual_role) as role 
		FROM 
		(select  t.ARTIFACT_ID as ARTIFACT_ID,t.GROUP_ID as GROUP_ID,t.VERSION as VERSION, t.ROLE as ROLE,
		t.dependence_id as dependence_id,t.manual_role as manual_role,
		t.DEPEN_GROUP_ID as DEPEN_GROUP_ID,t.DEPEN_VERSION as DEPEN_VERSION,t.DEPEN_ARTIFACT_ID as DEPEN_ARTIFACT_ID 
		from t_app_dependences t where  t.PACKAGING = 'war'   
		and t.DEPEN_ARTIFACT_ID like CONCAT('%',#{depenArtifactId},'%') AND
 		t.DEPEN_ARTIFACT_ID like '%skeleton%'
		) A
		INNER JOIN  (SELECT BB.ARTIFACT_ID FROM t_application BB where BB.PACKAGING = 'jar') B 
		ON a.DEPEN_ARTIFACT_ID = b.ARTIFACT_ID 
		group by a.dependence_id, a.ARTIFACT_ID,a.GROUP_ID,a.VERSION, a.DEPEN_ARTIFACT_ID,a.DEPEN_GROUP_ID,a.DEPEN_VERSION ,a.ROLE ) b
		where role = 'C'
	</select>
	
	
	<select id="queryProvider" resultMap="appDependencesMap" parameterType="String">
		SELECT b.dependence_id, b.ARTIFACT_ID,b.GROUP_ID,b.VERSION, b.DEPEN_ARTIFACT_ID,b.DEPEN_GROUP_ID,b.DEPEN_VERSION,b.role from 
		(
		SELECT a.dependence_id as dependence_id, a.ARTIFACT_ID as ARTIFACT_ID,a.GROUP_ID,a.VERSION,
		a.DEPEN_ARTIFACT_ID  as DEPEN_ARTIFACT_ID,a.DEPEN_GROUP_ID,a.DEPEN_VERSION
		 ,if(a.manual_role is null,a.role,a.manual_role) as role 
		FROM 
		(select  t.ARTIFACT_ID as ARTIFACT_ID,t.GROUP_ID as GROUP_ID,t.VERSION as VERSION, t.ROLE as ROLE,
		t.dependence_id as dependence_id,t.manual_role as manual_role,
		t.DEPEN_GROUP_ID as DEPEN_GROUP_ID,t.DEPEN_VERSION as DEPEN_VERSION,t.DEPEN_ARTIFACT_ID as DEPEN_ARTIFACT_ID 
		from t_app_dependences t where  t.PACKAGING = 'war'   
		and t.DEPEN_ARTIFACT_ID like CONCAT('%',#{depenArtifactId},'%') AND
 		t.DEPEN_ARTIFACT_ID like '%skeleton%'
		) A
		INNER JOIN  (SELECT BB.ARTIFACT_ID FROM t_application BB where BB.PACKAGING = 'jar') B 
		ON a.DEPEN_ARTIFACT_ID = b.ARTIFACT_ID 
		group by a.dependence_id, a.ARTIFACT_ID,a.GROUP_ID,a.VERSION, a.DEPEN_ARTIFACT_ID,a.DEPEN_GROUP_ID,a.DEPEN_VERSION ,a.ROLE ) b
		where role = 'P'
	</select>
	
	<select id="queryAllByArtifactId" resultMap="appDependencesMap" parameterType="String">
		SELECT a.dependence_id, a.ARTIFACT_ID ,a.GROUP_ID,a.VERSION , a.DEPEN_ARTIFACT_ID ,a.DEPEN_GROUP_ID ,a.DEPEN_VERSION ,a.ROLE FROM 
		(select  t.ARTIFACT_ID as ARTIFACT_ID, t.ROLE as ROLE,t.GROUP_ID as GROUP_ID, t.VERSION as VERSION,
		t.DEPEN_ARTIFACT_ID as DEPEN_ARTIFACT_ID ,t.dependence_id as dependence_id,t.DEPEN_GROUP_ID,t.DEPEN_VERSION from 
		t_app_dependences t where  t.PACKAGING = 'war'   and t.DEPEN_ARTIFACT_ID like CONCAT('%',#{depenArtifactId},'%') AND
 		t.DEPEN_ARTIFACT_ID like '%skeleton%'
		) A
		INNER JOIN  (SELECT DISTINCT(BB.ARTIFACT_ID) as ARTIFACT_ID FROM t_application BB where BB.PACKAGING = 'jar' ) B 
		ON a.DEPEN_ARTIFACT_ID = b.ARTIFACT_ID  
		group by a.dependence_id, a.ARTIFACT_ID ,a.GROUP_ID ,a.VERSION ,a.DEPEN_GROUP_ID ,a.DEPEN_VERSION ,a.DEPEN_ARTIFACT_ID ,a.ROLE ;
	</select>
	
	<!-- <select id="query" resultMap="appDependencesMap" parameterType="String">
		SELECT * from
		T_APP_DEPENDENCES 
		WHERE 
		DEPENDENCE_ID = #{dependenceId}
	</select> -->

	<insert id="add" parameterMap="appDependences" useGeneratedKeys="true"
		keyProperty="dependenceId">
		insert into
		T_APP_DEPENDENCES(
		GROUP_ID,
		ARTIFACT_ID,
		VERSION,
		DEPEN_GROUP_ID,
		DEPEN_ARTIFACT_ID,
		DEPEN_VERSION,
		PACKAGING,
		ROLE,
		MANUAL_ROLE,
		STATUS,
		CREATE_TIME,
		UPDATE_TIME)
		values(
		#{groupId},
		#{artifactId},
		#{version},
		#{depenGroupId},
		#{depenArtifactId},
		#{depenVersion},
		#{packaging},
		#{role},
		#{manualRole},
		#{status},
		now(),
		now()
		)
	</insert>

	<update id="update" parameterMap="appDependences">
		update T_APP_DEPENDENCES set
		GROUP_ID=#{groupId},
		ARTIFACT_ID=#{artifactId},
		VERSION=#{version},
		DEPEN_GROUP_ID=#{depenGroupId},
		DEPEN_ARTIFACT_ID=#{depenArtifactId},
		DEPEN_VERSION=#{depenVersion},
		PACKAGING=#{packaging},
		ROLE=#{role},
		MANUAL_ROLE=#{manualRole},
		STATUS=#{status},
		UPDATE_TIME=now()
		where
		GROUP_ID=#{groupId} and
		ARTIFACT_ID=#{artifactId} and
		VERSION=#{version} and
		DEPEN_GROUP_ID=#{depenGroupId} and
		DEPEN_ARTIFACT_ID=#{depenArtifactId} and
		DEPEN_VERSION=#{depenVersion}
	</update>

	<delete id="delete" parameterType="String">
		delete from T_APP_DEPENDENCES
		where
		DEPENDENCE_ID=#{dependenceId}
	</delete>

	<select id="queryAll" resultMap="appDependencesMap">
		SELECT 
		DEPENDENCE_ID, 
		GROUP_ID,
		ARTIFACT_ID, 
		VERSION,
		DEPEN_GROUP_ID, 
		DEPEN_ARTIFACT_ID, 
		DEPEN_VERSION,
		PACKAGING,
		ROLE,
		MANUAL_ROLE, 
		STATUS  
		from 
		T_APP_DEPENDENCES
	</select>
	
	<!-- 手动修改role -->
	<update id="updateManualRole" parameterMap="appDependences">
		update T_APP_DEPENDENCES
		set
		MANUAL_ROLE=#{manualRole}
		where
		DEPENDENCE_ID = #{dependenceId}
	</update>

	<update id="updateCheckValid">
		update T_APP_DEPENDENCES set STATUS="1"
		where
		DATE_FORMAT(UPDATE_TIME,'%Y%m%d') &lt;
		DATE_FORMAT(now(),'%Y%m%d')
	</update>
	
	
	<insert id="generateBatchInfoInIsolate"  parameterType="java.util.List">
		insert into T_APP_DEPENDENCES (
		GROUP_ID,ARTIFACT_ID,VERSION,DEPEN_GROUP_ID,DEPEN_ARTIFACT_ID,DEPEN_VERSION,
		ROLE,STATUS,CREATE_TIME,UPDATE_TIME)
		values
		<foreach collection="list" item="ade" separator=",">
			(#{ade.groupId},#{ade.artifactId},#{ade.version},#{ade.depenGroupId},#{ade.depenArtifactId},#{ade.depenVersion},#{ade.role},#{ade.status},now(),now())
		</foreach>
	</insert> 
</mapper>