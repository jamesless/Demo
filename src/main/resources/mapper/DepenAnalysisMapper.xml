<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sfpay.airscape.server.dao.DepenAnalysisDao">
	<resultMap id="DepenSkeletonModuleMap" type="com.sfpay.airscape.server.vo.auxiliary.DepenSkeletonModule">
		<result column="group_id" property="groupId" />
		<result column="ARTIFACT_ID" property="artifactId" />
		<result column="VERSION" property="version" />
		<result column="DEPEN_GROUP_ID" property="depenGroupId" />
		<result column="DEPEN_ARTIFACT_ID" property="depenArtifactId" />
		<result column="DEPEN_VERSION" property="depenVersion" />
	</resultMap>

	<select id="queryAllSkeletenModual" resultMap="DepenSkeletonModuleMap">
		select appdep.group_id,appdep.ARTIFACT_ID,appdep.VERSION,
		appdep.DEPEN_GROUP_ID,appdep.DEPEN_ARTIFACT_ID,appdep.DEPEN_VERSION
		from T_APP_DEPENDENCES appdep
		where 
		IF(appdep.MANUAL_ROLE IS NULL,appdep.ROLE,appdep.MANUAL_ROLE) ='c'
		and appdep.status='0' and appdep.depen_artifact_id
		like '%skeleton%' and appdep.group_id is not null and appdep.group_id
		!= '' and appdep.PACKAGING='war'
	</select>


	<!-- truncate table before analysis -->
	<update id="trunkcatetable" parameterType="String">
		TRUNCATE TABLE
		${paramname}
	</update>
	<!-- query different providers by GAV -->
	<resultMap id="appDependencesMap" type="com.sfpay.airscape.server.vo.AppDependences">
		<result column="group_id" property="groupId" />
		<result column="ARTIFACT_ID" property="artifactId" />
		<result column="VERSION" property="version" />
		<result column="DEPEN_GROUP_ID" property="depenGroupId" />
		<result column="DEPEN_ARTIFACT_ID" property="depenArtifactId" />
		<result column="DEPEN_VERSION" property="depenVersion" />
	</resultMap>
	
	<resultMap id="relationMap" type="com.sfpay.airscape.server.vo.auxiliary.ApplicationRelation">
		<result column="GROUP_ID" property="groupId" />
		<result column="ARTIFACT_ID" property="artifactId" />
		<result column="VERSION" property="version" />
		<result column="DEPEN_GROUP_ID" property="depGroupId" />
		<result column="DEPEN_ARTIFACT_ID" property="depArtifactId" />
		<result column="DEPEN_VERSION" property="depVersion" />
		<result column="DEPEN_ON_GROUP_ID" property="depenOnGroupId" />
		<result column="DEPEN_ON_ARTIFACT_ID" property="depenOnArtifactId" />
		<result column="DEPEN_ON_VERSION" property="depenOnVersion" />
		<result column="APPLICATION_NAME" property="applicationName" />
		<result column="DEP_APPLICATION_NAME" property="depApplicationName" />
		<result column="LEVEL" property="level" />
		<result column="DEPEN_LEVEL" property="depLevel" />
	</resultMap>

	<select id="queryDependedByGAV" resultMap="appDependencesMap">
		select
		appdep.group_id,appdep.ARTIFACT_ID,appdep.VERSION,
		appdep.DEPEN_GROUP_ID,appdep.DEPEN_ARTIFACT_ID,appdep.DEPEN_VERSION
		from T_APP_DEPENDENCES appdep
		where appdep.DEPEN_GROUP_ID=#{group}
		and
		appdep.DEPEN_ARTIFACT_ID=#{artifact}
		and
		appdep.DEPEN_VERSION=#{version}
		and IF(appdep.MANUAL_ROLE IS NULL,appdep.ROLE,appdep.MANUAL_ROLE) ='P'
		and
		appdep.status='0'
		and appdep.group_id !='' and appdep.VERSION !='';
	</select>

	<!-- insert relation talbe after analysis -->
	<insert id="addDependencyRelation" parameterType="com.sfpay.airscape.server.vo.DependencyAnalysis">
		insert into
		T_DEPEN_ANALYSIS(
		GROUP_ID,
		ARTIFACT_ID,
		VERSION,
		DEPEN_GROUP_ID,
		DEPEN_ARTIFACT_ID,
		DEPEN_VERSION,
		DEPEN_ON_GROUP_ID,
		DEPEN_ON_ARTIFACT_ID,
		DEPEN_ON_VERSION,
		STATUS,
		CREATE_TIME,
		UPDATE_TIME
		)
		values(
		#{groupId},
		#{artifactId},
		#{version},
		#{depenGroupId},
		#{depenArtifactId},
		#{depenVersion},
		#{depenOnGroupId},
		#{depenOnArtifactId},
		#{depenOnVersion},
		#{status},
		now(),
		now()
		)
	</insert>

	<!--query reserved for future use -->
	<select id="queryDependencyRelation" parameterType="String">
		select
		GROUP_ID as groupId,
		ARTIFACT_ID as artifactId,
		VERSION as version,
		DEPEN_GROUP_ID as depenGroupId,
		DEPEN_ARTIFACT_ID depenArtfact,
		DEPEN_VERSION depenVersion,
		DEPEN_ON_GROUP_ID depenOnGroupId,
		DEPEN_ON_ARTIFACT_ID as depenOnArtifactId ,
		DEPEN_ON_VERSION as
		depenOnVersion,
		STATUS as status
		from T_DEPEN_ANALYSIS
		where
	</select>

	<!-- zfan test to do research -->
	<!-- <select id="queryAbc" parameterType="String" resultType="com.sfpay.airscape.server.vo.Zfappdep"> 
		select appnamea, appnameb, appdep from zfantest where appnamea=#{paramname} 
		</select> -->

	<!--query all graphic nodes -->

	<select id="queryAllGraphicNode" resultType="com.sfpay.airscape.server.vo.auxiliary.DepenGraphicNode">
		select DISTINCT
		depen.group_id as groupId,depen.ARTIFACT_ID as artifactId
		from
		t_depen_analysis depen
	</select>

	<!--query all graphic nodes -->

	<select id="queryAllGraphicNodeRelation" resultType="com.sfpay.airscape.server.vo.auxiliary.DepenGraphicNode">
		select
		DISTINCT depen.group_id as groupId,depen.ARTIFACT_ID as artifactId,
		depen.DEPEN_GROUP_ID as depenGroupId ,depen.DEPEN_ARTIFACT_ID as
		depenArtifactId
		from t_depen_analysis depen
	</select>

	<!--insert into circle instance -->

	<insert id="insertCircleTable" parameterType="com.sfpay.airscape.server.vo.auxiliary.DepenCircleRel">

		INSERT into
		t_circle_dependence
		(DEPENDENCE_ID,TYPE,STATUS,CREATE_TIME,UPDATE_TIME)
		VALUES(#{dependenceId},#{type},#{status},NOW(),NOW());

	</insert>


	<!-- query all error skeleton jar dependency relations -->

	<select id="queryAllErrorJARRelations" resultMap="DepenSkeletonModuleMap">
		select
		appdep.group_id,appdep.ARTIFACT_ID,appdep.VERSION,
		appdep.DEPEN_GROUP_ID,appdep.DEPEN_ARTIFACT_ID,appdep.DEPEN_VERSION
		from T_APP_DEPENDENCES appdep
		where appdep.ROLE='c' and
		(appdep.PACKAGING='jar') and
		appdep.ARTIFACT_ID like '%skeleton%' and
		DEPEN_ARTIFACT_ID like '%skeleton%' ;
	</select>

	<!-- <insert id="add" parameterMap="ApplicationInfo"> insert into T_APPLICATION_INFO( 
		APPLICATION_NAME, SUB_SYSTEM_NAME, LEVEL, DESCRIPTION, CREATE_TIME, UPDATE_TIME) 
		values( #{applicationName}, #{subSystemName}, #{level}, #{description}, #{createTime}, 
		#{updateTime} ) </insert> -->




	<select id="getApplicationRelations" resultMap="relationMap">
		<!-- relationship = '1' 依赖 relationship = '2' 被依赖 relationship = '3' 依赖和被依赖关系 
			map.put("subSystemName", subSystemName); map.put("relationship", relationship); 
			map.put("applicationName", applicationName); 'ebank-server' ! -->
		SELECT * FROM  
		(
			SELECT AA.ARTIFACT_ID AS ARTIFACT_ID,AA.GROUP_ID AS GROUP_ID,AA.VERSION AS VERSION,
			AA.DEPEN_ARTIFACT_ID AS DEPEN_ON_ARTIFACT_ID, AA.DEPEN_GROUP_ID AS DEPEN_ON_GROUP_ID,AA.DEPEN_VERSION AS DEPEN_ON_VERSION,
			BB.ARTIFACT_ID AS DEPEN_ARTIFACT_ID,BB.GROUP_ID AS DEPEN_GROUP_ID, BB.VERSION AS DEPEN_VERSION,
			AA.ARTIFACT_ID AS APPLICATION_NAME,BB.ARTIFACT_ID AS DEP_APPLICATION_NAME,
			AA.`LEVEL`,BB.DEPEN_LEVEL
			FROM 
				(
	
				SELECT SUB_SYS.`LEVEL` AS LEVEL,S_INFO.ARTIFACT_ID,S_INFO.GROUP_ID,S_INFO.VERSION, S_INFO.DEPEN_ARTIFACT_ID,S_INFO.DEPEN_GROUP_ID,S_INFO.DEPEN_VERSION,S_INFO.ROLE FROM	
					(SELECT S_A_INFO.SUB_SYSTEM_ID,APPLICATION.ARTIFACT_ID,APPLICATION.GROUP_ID,APPLICATION.VERSION, APPLICATION.DEPEN_ARTIFACT_ID,APPLICATION.DEPEN_GROUP_ID,APPLICATION.DEPEN_VERSION,APPLICATION.ROLE from
						(SELECT app.ID,BB.ARTIFACT_ID,BB.GROUP_ID,BB.VERSION, BB.DEPEN_ARTIFACT_ID,BB.DEPEN_GROUP_ID,BB.DEPEN_VERSION,BB.ROLE FROM
							(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,ROLE
								FROM 
									(
										select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION, IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
										from t_app_dependences  
										where DEPEN_ARTIFACT_ID like '%skeleton%'  and PACKAGING = 'war'
									) A
								WHERE A.ROLE = 'C'   
							) BB
							INNER JOIN t_application app
							ON BB.ARTIFACT_ID = app.APPLICATION_NAME
						)APPLICATION
					INNER JOIN t_subsys_app_info S_A_INFO
					ON S_A_INFO.APPLICATION_ID = APPLICATION.ID
					)S_INFO
				INNER JOIN t_sub_system SUB_SYS
				ON S_INFO.SUB_SYSTEM_ID = SUB_SYS.SUB_SYSTEM_ID
	
				 ) AA
			left JOIN  
				(
					
				SELECT SUB_SYS.`LEVEL` AS DEPEN_LEVEL,S_INFO.ARTIFACT_ID,S_INFO.GROUP_ID,S_INFO.VERSION, S_INFO.DEPEN_ARTIFACT_ID,S_INFO.DEPEN_GROUP_ID,S_INFO.ROLE FROM	
					(SELECT S_A_INFO.SUB_SYSTEM_ID,APPLICATION.ARTIFACT_ID,APPLICATION.GROUP_ID,APPLICATION.VERSION, APPLICATION.DEPEN_ARTIFACT_ID,APPLICATION.DEPEN_GROUP_ID,APPLICATION.ROLE from
						(SELECT app.ID,BB.ARTIFACT_ID,BB.GROUP_ID,BB.VERSION, BB.DEPEN_ARTIFACT_ID,BB.DEPEN_GROUP_ID,BB.ROLE FROM
							(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,ROLE
								FROM 
								(
									select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID, IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
									from t_app_dependences  
									where DEPEN_ARTIFACT_ID like '%skeleton%' and PACKAGING = 'war'
								) B
								WHERE B.ROLE = 'P' 
							) BB
							INNER JOIN t_application app
							ON BB.ARTIFACT_ID = app.APPLICATION_NAME
						)APPLICATION
					INNER JOIN t_subsys_app_info S_A_INFO
					ON S_A_INFO.APPLICATION_ID = APPLICATION.ID
					)S_INFO
				INNER JOIN t_sub_system SUB_SYS
				ON S_INFO.SUB_SYSTEM_ID = SUB_SYS.SUB_SYSTEM_ID
	
				) BB 
			ON AA.DEPEN_ARTIFACT_ID = BB.DEPEN_ARTIFACT_ID
			WHERE BB.ARTIFACT_ID IS NOT NULL 
		) AAA
		
		INNER JOIN
		(
			select c.ARTIFACT_ID,c.GROUP_ID,c.VERSION from t_sub_system a, t_subsys_app_info b ,t_application c
			WHERE a.SUB_SYSTEM_ID = b.SUB_SYSTEM_ID and c.ID = b.APPLICATION_ID 
				<if test="subSystemName != null and subSystemName != ''">
				and a.SUB_SYSTEM_ENAME = #{subSystemName}
			</if>
		)  BBB
			
		<if test="relationship== '1'.toString()">
			ON  (AAA.ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.GROUP_ID = BBB.GROUP_ID AND AAA.VERSION = BBB.VERSION) 
			where 1=1 
			<if test="applicationName != null and applicationName != ''">
				AND AAA.APPLICATION_NAME like CONCAT('%',#{applicationName},'%') 
				OR AAA.DEP_APPLICATION_NAME like CONCAT('%',#{applicationName},'%')
			</if>
		</if>
		
		<if test="relationship == '2'.toString()">
			ON  (AAA.DEPEN_ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.DEPEN_GROUP_ID = BBB.GROUP_ID AND AAA.DEPEN_VERSION = BBB.VERSION)
			where 1=1 
			<if test="applicationName != null and applicationName != ''">
				AND AAA.APPLICATION_NAME like CONCAT('%',#{applicationName},'%') 
				OR AAA.DEP_APPLICATION_NAME like CONCAT('%',#{applicationName},'%')
			</if>
		</if>
		
		<if test="relationship == '0'.toString()">
			ON  (AAA.ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.GROUP_ID = BBB.GROUP_ID AND AAA.VERSION = BBB.VERSION) 
			OR  (AAA.DEPEN_ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.DEPEN_GROUP_ID = BBB.GROUP_ID AND AAA.DEPEN_VERSION = BBB.VERSION) 
			where 1=1 
			<if test="applicationName != null and applicationName != ''">
				AND AAA.APPLICATION_NAME like CONCAT('%',#{applicationName},'%') 
				OR AAA.DEP_APPLICATION_NAME like CONCAT('%',#{applicationName},'%')
			</if>
		</if>
		GROUP BY 
			AAA.ARTIFACT_ID,AAA.GROUP_ID,AAA.VERSION,
			AAA.DEPEN_ON_ARTIFACT_ID, AAA.DEPEN_ON_GROUP_ID,AAA.DEPEN_ON_VERSION,
			AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_GROUP_ID, AAA.DEPEN_VERSION,
			AAA.APPLICATION_NAME,AAA.DEP_APPLICATION_NAME

	</select>
	
	<resultMap id="DepenSubSystemMap" type="com.sfpay.airscape.server.vo.auxiliary.SubSystemAnalysis">
		<result column="SUB_SYSTEM_ENAME" property="subSystemEname" />
		<result column="SUB_SYSTEM_CNAME" property="subSystemCname" />
		<result column="level" property="subSystemLevel" />
		<result column="depSubSystemEname" property="depSubSystemEname" />
		<result column="depSubSystemCname" property="depSubSystemCname" />
		<result column="depSubSystemLevel" property="depSubSystemLevel" />
	</resultMap>
	
	<select id="getSubsysRelations" resultMap="DepenSubSystemMap" parameterType="map">
		<if test="relationship== '1'.toString()">
			SELECT distinct BBBBB.SUB_SYSTEM_CNAME,BBBBB.SUB_SYSTEM_ENAME,BBBBB.level,
				subsys.SUB_SYSTEM_CNAME AS depSubSystemCname,subsys.SUB_SYSTEM_ENAME AS depSubSystemEname,subsys.level AS depSubSystemLevel
				FROM(
				SELECT subsys.SUB_SYSTEM_CNAME,subsys.SUB_SYSTEM_ENAME,subsys.level,
							 BBBB.DEPEN_GROUP_ID,BBBB.DEPEN_ARTIFACT_ID,BBBB.DEPEN_VERSION
					FROM(
					SELECT AAA.GROUP_ID,AAA.ARTIFACT_ID,AAA.VERSION,AAA.DEPEN_GROUP_ID,AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_VERSION FROM  
						(SELECT AA.ARTIFACT_ID AS ARTIFACT_ID,AA.GROUP_ID AS GROUP_ID,AA.VERSION AS VERSION,
							AA.DEPEN_ARTIFACT_ID AS DEPEN_ON_ARTIFACT_ID, AA.DEPEN_GROUP_ID AS DEPEN_ON_GROUP_ID,AA.DEPEN_VERSION AS DEPEN_ON_VERSION,
							BB.ARTIFACT_ID AS DEPEN_ARTIFACT_ID,BB.GROUP_ID AS DEPEN_GROUP_ID, BB.VERSION AS DEPEN_VERSION,
							AA.ARTIFACT_ID AS APPLICATION_NAME,BB.ARTIFACT_ID AS DEP_APPLICATION_NAME
							FROM 
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%'  and PACKAGING = 'war'
										) A
									WHERE A.ROLE = 'C'   
								 ) AA
							LEFT JOIN  
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID, IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%' and PACKAGING = 'war'
										) B
									WHERE B.ROLE = 'P' 
								) BB 
							ON AA.DEPEN_ARTIFACT_ID = BB.DEPEN_ARTIFACT_ID
							WHERE BB.ARTIFACT_ID IS NOT NULL 
						) AAA
						
						INNER JOIN
						(select c.ARTIFACT_ID,c.GROUP_ID,c.VERSION from t_sub_system a, t_subsys_app_info b ,t_application c
							WHERE a.SUB_SYSTEM_ID = b.SUB_SYSTEM_ID and c.ID = b.APPLICATION_ID and a.SUB_SYSTEM_ENAME = #{subSystemName}
						)  BBB
						ON  (AAA.ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.GROUP_ID = BBB.GROUP_ID AND AAA.VERSION = BBB.VERSION) 
						where 1=1 GROUP BY 
						AAA.ARTIFACT_ID,AAA.GROUP_ID,AAA.VERSION,
						AAA.DEPEN_ON_ARTIFACT_ID, AAA.DEPEN_ON_GROUP_ID,AAA.DEPEN_ON_VERSION,
						AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_GROUP_ID, AAA.DEPEN_VERSION,
						AAA.APPLICATION_NAME,AAA.DEP_APPLICATION_NAME
				) BBBB
				INNER JOIN t_application application ON application.GROUP_ID = BBBB.GROUP_ID AND application.ARTIFACT_ID = BBBB.ARTIFACT_ID AND application.VERSION = BBBB.VERSION
				LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
				LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			) BBBBB
			INNER JOIN t_application application ON application.GROUP_ID = BBBBB.DEPEN_GROUP_ID AND application.ARTIFACT_ID = BBBBB.DEPEN_ARTIFACT_ID AND application.VERSION = BBBBB.DEPEN_VERSION
			LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
			LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			WHERE BBBBB.SUB_SYSTEM_CNAME != subsys.SUB_SYSTEM_CNAME
		</if>

		<if test="relationship== '2'.toString()">
			SELECT distinct BBBBB.SUB_SYSTEM_CNAME,BBBBB.SUB_SYSTEM_ENAME,BBBBB.level,
				subsys.SUB_SYSTEM_CNAME AS depSubSystemCname,subsys.SUB_SYSTEM_ENAME AS depSubSystemEname,subsys.level AS depSubSystemLevel
				FROM(
				SELECT subsys.SUB_SYSTEM_CNAME,subsys.SUB_SYSTEM_ENAME,subsys.level,
							 BBBB.DEPEN_GROUP_ID,BBBB.DEPEN_ARTIFACT_ID,BBBB.DEPEN_VERSION
					FROM(
					SELECT AAA.GROUP_ID,AAA.ARTIFACT_ID,AAA.VERSION,AAA.DEPEN_GROUP_ID,AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_VERSION FROM  
						(SELECT AA.ARTIFACT_ID AS ARTIFACT_ID,AA.GROUP_ID AS GROUP_ID,AA.VERSION AS VERSION,
							AA.DEPEN_ARTIFACT_ID AS DEPEN_ON_ARTIFACT_ID, AA.DEPEN_GROUP_ID AS DEPEN_ON_GROUP_ID,AA.DEPEN_VERSION AS DEPEN_ON_VERSION,
							BB.ARTIFACT_ID AS DEPEN_ARTIFACT_ID,BB.GROUP_ID AS DEPEN_GROUP_ID, BB.VERSION AS DEPEN_VERSION,
							AA.ARTIFACT_ID AS APPLICATION_NAME,BB.ARTIFACT_ID AS DEP_APPLICATION_NAME
							FROM 
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%'  and PACKAGING = 'war'
										) A
									WHERE A.ROLE = 'C'   
								 ) AA
							LEFT JOIN  
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID, IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%' and PACKAGING = 'war'
										) B
									WHERE B.ROLE = 'P' 
								) BB 
							ON AA.DEPEN_ARTIFACT_ID = BB.DEPEN_ARTIFACT_ID
							WHERE BB.ARTIFACT_ID IS NOT NULL 
						) AAA
						
						INNER JOIN
						(select c.ARTIFACT_ID,c.GROUP_ID,c.VERSION from t_sub_system a, t_subsys_app_info b ,t_application c
							WHERE a.SUB_SYSTEM_ID = b.SUB_SYSTEM_ID and c.ID = b.APPLICATION_ID and a.SUB_SYSTEM_ENAME = #{subSystemName}
						)  BBB
						ON  (AAA.DEPEN_ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.DEPEN_GROUP_ID = BBB.GROUP_ID AND AAA.DEPEN_VERSION = BBB.VERSION) 
						where 1=1 GROUP BY 
						AAA.ARTIFACT_ID,AAA.GROUP_ID,AAA.VERSION,
						AAA.DEPEN_ON_ARTIFACT_ID, AAA.DEPEN_ON_GROUP_ID,AAA.DEPEN_ON_VERSION,
						AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_GROUP_ID, AAA.DEPEN_VERSION,
						AAA.APPLICATION_NAME,AAA.DEP_APPLICATION_NAME
				) BBBB
				INNER JOIN t_application application ON application.GROUP_ID = BBBB.GROUP_ID AND application.ARTIFACT_ID = BBBB.ARTIFACT_ID AND application.VERSION = BBBB.VERSION
				LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
				LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			) BBBBB
			INNER JOIN t_application application ON application.GROUP_ID = BBBBB.DEPEN_GROUP_ID AND application.ARTIFACT_ID = BBBBB.DEPEN_ARTIFACT_ID AND application.VERSION = BBBBB.DEPEN_VERSION
			LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
			LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			WHERE BBBBB.SUB_SYSTEM_CNAME != subsys.SUB_SYSTEM_CNAME
		</if>

		<if test="relationship== '0'.toString()">
			SELECT distinct BBBBB.SUB_SYSTEM_CNAME,BBBBB.SUB_SYSTEM_ENAME,BBBBB.level,
				subsys.SUB_SYSTEM_CNAME AS depSubSystemCname,subsys.SUB_SYSTEM_ENAME AS depSubSystemEname,subsys.level AS depSubSystemLevel
				FROM(
				SELECT subsys.SUB_SYSTEM_CNAME,subsys.SUB_SYSTEM_ENAME,subsys.level,
							 BBBB.DEPEN_GROUP_ID,BBBB.DEPEN_ARTIFACT_ID,BBBB.DEPEN_VERSION
					FROM(
					SELECT AAA.GROUP_ID,AAA.ARTIFACT_ID,AAA.VERSION,AAA.DEPEN_GROUP_ID,AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_VERSION FROM  
						(SELECT AA.ARTIFACT_ID AS ARTIFACT_ID,AA.GROUP_ID AS GROUP_ID,AA.VERSION AS VERSION,
							AA.DEPEN_ARTIFACT_ID AS DEPEN_ON_ARTIFACT_ID, AA.DEPEN_GROUP_ID AS DEPEN_ON_GROUP_ID,AA.DEPEN_VERSION AS DEPEN_ON_VERSION,
							BB.ARTIFACT_ID AS DEPEN_ARTIFACT_ID,BB.GROUP_ID AS DEPEN_GROUP_ID, BB.VERSION AS DEPEN_VERSION,
							AA.ARTIFACT_ID AS APPLICATION_NAME,BB.ARTIFACT_ID AS DEP_APPLICATION_NAME
							FROM 
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,DEPEN_VERSION,IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%'  and PACKAGING = 'war'
										) A
									WHERE A.ROLE = 'C'   
								 ) AA
							LEFT JOIN  
								(SELECT ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID,ROLE 
									FROM 
										(select ARTIFACT_ID,GROUP_ID,VERSION, DEPEN_ARTIFACT_ID,DEPEN_GROUP_ID, IF(MANUAL_ROLE IS NULL,ROLE,MANUAL_ROLE) ROLE  
											from t_app_dependences  
											where DEPEN_ARTIFACT_ID like '%skeleton%' and PACKAGING = 'war'
										) B
									WHERE B.ROLE = 'P' 
								) BB 
							ON AA.DEPEN_ARTIFACT_ID = BB.DEPEN_ARTIFACT_ID
							WHERE BB.ARTIFACT_ID IS NOT NULL 
						) AAA
						
						INNER JOIN
						(select c.ARTIFACT_ID,c.GROUP_ID,c.VERSION from t_sub_system a, t_subsys_app_info b ,t_application c
							WHERE a.SUB_SYSTEM_ID = b.SUB_SYSTEM_ID and c.ID = b.APPLICATION_ID and a.SUB_SYSTEM_ENAME = #{subSystemName}
						)  BBB
						ON  (AAA.ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.GROUP_ID = BBB.GROUP_ID AND AAA.VERSION = BBB.VERSION) 
						OR  (AAA.DEPEN_ARTIFACT_ID = BBB.ARTIFACT_ID AND AAA.DEPEN_GROUP_ID = BBB.GROUP_ID AND AAA.DEPEN_VERSION = BBB.VERSION) 
						where 1=1 GROUP BY 
						AAA.ARTIFACT_ID,AAA.GROUP_ID,AAA.VERSION,
						AAA.DEPEN_ON_ARTIFACT_ID, AAA.DEPEN_ON_GROUP_ID,AAA.DEPEN_ON_VERSION,
						AAA.DEPEN_ARTIFACT_ID,AAA.DEPEN_GROUP_ID, AAA.DEPEN_VERSION,
						AAA.APPLICATION_NAME,AAA.DEP_APPLICATION_NAME
				) BBBB
				INNER JOIN t_application application ON application.GROUP_ID = BBBB.GROUP_ID AND application.ARTIFACT_ID = BBBB.ARTIFACT_ID AND application.VERSION = BBBB.VERSION
				LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
				LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			) BBBBB
			INNER JOIN t_application application ON application.GROUP_ID = BBBBB.DEPEN_GROUP_ID AND application.ARTIFACT_ID = BBBBB.DEPEN_ARTIFACT_ID AND application.VERSION = BBBBB.DEPEN_VERSION
			LEFT JOIN t_subsys_app_info subsys_app ON application.ID = subsys_app.APPLICATION_ID
			LEFT JOIN t_sub_system subsys ON subsys_app.SUB_SYSTEM_ID = subsys.SUB_SYSTEM_ID
			WHERE BBBBB.SUB_SYSTEM_CNAME != subsys.SUB_SYSTEM_CNAME
		</if>
	</select>

	<select id="getApplicationIncorrect" resultType="com.sfpay.airscape.server.vo.auxiliary.ApplicationIncorrect"
		parameterType="map">
		SELECT
		ta.APPLICATION_NAME as applicationName ,
		tai.SUB_SYSTEM_ENAME as subSystemName,
		ta.PACKAGING as packaging,
		ta.GROUP_ID as groupId,
		ta.ARTIFACT_ID as
		artifactId ,
		ta.POM_URL as
		pomUrl ,
		ta.POM_DESCRIPTION as
		pomDescription,
		tai.`LEVEL` as level
		from
		(select a.APPLICATION_NAME,c.SUB_SYSTEM_ENAME,c.DESCRIPTION,c.LEVEL from t_application a 
			left join T_SUBSYS_APP_INFO b on a.ID = b.APPLICATION_ID
			left join t_sub_system c on b.SUB_SYSTEM_ID=c.SUB_SYSTEM_ID) tai
		right join
		T_APPLICATION ta
		on
		tai.APPLICATION_NAME=ta.APPLICATION_NAME

		where ta.GROUP_ID = #{groupId}
		and ta.ARTIFACT_ID = #{artifactId} LIMIT 1
	</select>

	<select id="getcircleRelListWar" resultType="String">
		select dependence_id
		from t_circle_dependence where type='war'
	</select>
	<select id="getcircleRelListJar" resultType="String">
		select dependence_id
		from t_circle_dependence where type='jar'
	</select>

	<select id="getApplicationsRelations" resultType="com.sfpay.airscape.server.vo.auxiliary.ApplicationsRelation"
		parameterType="map">
		select
		tda.GROUP_ID as groupId,
		tda.ARTIFACT_ID as
		artifactId,
		tda.VERSION as version,
		tda.DEPEN_GROUP_ID as depGroupId,
		tda.DEPEN_ARTIFACT_ID as
		depArtifactId,
		tda.DEPEN_VERSION as depVersion,
		tda.DEPEN_ON_GROUP_ID as
		depenOnGroupId,
		tda.DEPEN_ON_ARTIFACT_ID as
		depenOnArtifactId,
		tda.DEPEN_ON_VERSION as depenOnVersion
		from
		T_DEPEN_ANALYSIS tda
		where (tda.GROUP_ID = #{groupId} and
		tda.ARTIFACT_ID== #{artifactId} and
		tda.DEPEN_GROUP_ID= #{depGroupId }
		and
		tda.DEPEN_ARTIFACT_ID=#{depArtifactId})
		or (tda.GROUP_ID =
		#{depGroupId} and tda.ARTIFACT_ID== #{depArtifactId}
		and
		tda.DEPEN_GROUP_ID= #{groupId } and
		tda.DEPEN_ARTIFACT_ID=#{artifactId})
	</select>
</mapper>