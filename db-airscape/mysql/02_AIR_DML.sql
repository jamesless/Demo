
-- 1
DROP TABLE IF EXISTS  T_SVN_REPOSITORY;
-- 2 
DROP TABLE IF EXISTS  PACKAGE_TYPE;
-- 3 
DROP TABLE IF EXISTS  ARCHITECTURE_LEVEL;
-- 4 
DROP TABLE IF EXISTS  T_BUSINESS_PRODUCT;
-- 5 
DROP TABLE IF EXISTS  T_SUB_SYSTEM;
-- 6
DROP TABLE IF EXISTS  T_APPLICATION_INFO;
-- 7
DROP TABLE IF EXISTS  T_APPLICATION;
-- 8
DROP TABLE IF EXISTS  ERROR_MESSAGE;
-- 9
DROP TABLE IF EXISTS  T_APP_DEPENDENCES;
-- 10
DROP TABLE IF EXISTS  T_DEPEN_ANALYSIS;
-- 11
DROP TABLE IF EXISTS  T_CIRCLE_DEPENDENCE;
-- 12
DROP TABLE IF EXISTS  T_APP_MAN_DEPENDENCES;
--13
DROP TABLE IF EXISTS  M_DEPEN_ANALYSIS;

-- 1 SVN库地址表
create TABLE T_SVN_REPOSITORY(
id INT(8) PRIMARY KEY auto_increment not NULL,
REPOSITORY_NAME VARCHAR(50) comment 'e.g. ebank',
REPOSITORY_URL  VARCHAR(100) comment '源码库的根目录' ,
DESCRIPTION VARCHAR(80) 
);



-- 2 包类型
CREATE TABLE PACKAGE_TYPE(
type  INT(4) PRIMARY KEY auto_increment auto_increment  not null, 
PACKAGE_TYPE VARCHAR(20) comment 'WAR/JAR/POM/APK/EXE/DMG/PKG/',
DESCRIPTION VARCHAR(50)
);

-- 3架构层级 
CREATE TABLE ARCHITECTURE_LEVEL(
LEVEL  INT(4)  PRIMARY KEY auto_increment auto_increment  not null, 
LEVEL_NAME VARCHAR(30) comment 'eg.sypay-server',
DESCRIPTION VARCHAR(50)
);

-- 4 业务产品分类 
CREATE TABLE T_BUSINESS_PRODUCT(
BUSINESS_ID  INT(4) PRIMARY KEY ,
BUSINESS_NAME VARCHAR(30) comment '业务大类的名字',
DESCRIPTION VARCHAR(30)
);

-- 5 子系统描述表
CREATE TABLE T_SUB_SYSTEM(
SUB_SYSTEM_NAME  VARCHAR(30) PRIMARY KEY comment 'e.g. sypay-server',
PARENT_NAME VARCHAR(30) comment '顶级系统此列填写 NONE ',
BUSINESS_ID	int(4) comment '外键到T_BUSINESS_PRODUCT表',
QA_SEQUENCE INT(3) comment 'QA序号,与SVN项目管理目录中的序号相对应',
SVN_TRUNK_URL VARCHAR(100) comment '目前设计为只支持主干，也只扫描主干',
DESCRIPTION VARCHAR(30),
CREATE_TIME TIMESTAMP,
UPDATE_TIME TIMESTAMP
);



-- 6 应用模块关系表
CREATE TABLE T_APPLICATION_INFO(
APPLICATION_NAME  VARCHAR(30) PRIMARY KEY comment 'e.g. sypay-server',
SUB_SYSTEM_NAME VARCHAR(30) comment '外键到T_SUB_SYSTEM',
LEVEL int(4) comment '外键到ARCHITECTURE_LEVEL表',
DESCRIPTION VARCHAR(80),
CREATE_TIME TIMESTAMP,
UPDATE_TIME TIMESTAMP
);




-- 7 应用模块原始扫描表
CREATE TABLE T_APPLICATION(
ID INT(8) PRIMARY KEY auto_increment not NULL,
APPLICATION_NAME  VARCHAR(30) comment 'e.g. sypay-server',
PACKAGING VARCHAR(50) COMMENT 'WAR/JAR/POM/APK/EXE/DMG/PKG/ 外键到 表PACKAGE_TYPE' ,
GROUP_ID  VARCHAR(50),
ARTIFACT_ID VARCHAR(50),
POM_URL VARCHAR(100) comment 'http://dpsvn.sf-pay.com/svn/ebank/trunk/sypay-server/pom.xml', 
POM_DESCRIPTION VARCHAR(80) comment '从POM文件中自动提取的功能职责的描述',
VERSION VARCHAR(20)  ,
status 	 char(1) comment '0: 使用中 1: 未使用（SVN中存在过，目前不存在了）',
CREATE_TIME TIMESTAMP,
UPDATE_TIME TIMESTAMP
);



-- 8 在查找POM文件、解析POM文件时出错的记录
CREATE TABLE ERROR_MESSAGE(
APP_ID VARCHAR(30),
SVN_PATH varchar(100) comment '工程的SVN地址',
ERR_TYPE  VARCHAR(1) comment'0：查找POM文件出错 1：解析POM文件出错',
ERR_MSG VARCHAR(500) comment '具体错误信息' ,
CREATE_TIME TIMESTAMP,
UPDATE_TIME TIMESTAMP
);


-- 9 模块原始依赖关系表（T_APP_DEPENDENCES)


CREATE TABLE T_APP_DEPENDENCES(
DEPENDENCE_ID INT(8) PRIMARY KEY auto_increment not NULL,
GROUP_ID  VARCHAR(50) comment '依赖模块的GROUP_ID',
ARTIFACT_ID VARCHAR(50) comment '依赖模块的ARTIFACT',
VERSION VARCHAR(50)   comment '依赖模块的VERSION',
DEPEN_GROUP_ID	VARCHAR(50)	comment '被依赖模块的GROUP_ID',
DEPEN_ARTIFACT_ID	VARCHAR(50)	 comment '被依赖模块的ARTIFACT_ID', 	
DEPEN_VERSION VARCHAR(50) comment '被依赖模块的VERSION' , 
PACKAGING VARCHAR(50) COMMENT 'WAR/JAR/POM/APK/EXE/DMG/PKG/ 外键到 表PACKAGE_TYPE',        
ROLE char(1) comment '依赖者和被依赖者的关系 C:消费者（依赖者是被依赖者的消费者）P:生产者（依赖者是被依赖者的生产者',
status 	 char(1) comment '0: 使用中 1: 未使用 当依赖关系不存在时是否需要表示出来',
CREATE_TIME TIMESTAMP,
UPDATE_TIME TIMESTAMP
);


-- 10 依赖关系分析表（T_DEPEN_ANALYSIS)

CREATE TABLE T_DEPEN_ANALYSIS(
DEPENDENCE_ID	INT(8) PRIMARY KEY auto_increment not NULL,
GROUP_ID	VARCHAR(50)	 comment '依赖模块的GROUP_ID',
ARTIFACT_ID	VARCHAR(50) comment '依赖模块的ARTIFACT_ID',
VERSION	VARCHAR(50)	 	comment '依赖模块的VERSION',
DEPEN_GROUP_ID	VARCHAR(50)	 	comment '被依赖模块的GROUP_ID',
DEPEN_ARTIFACT_ID	VARCHAR(50)	comment '被依赖模块的ARTIFACT_ID',
DEPEN_VERSION	VARCHAR(50)	comment '被依赖模块的VERSION',
DEPEN_ON_GROUP_ID	VARCHAR(50)	comment 	'A通过b.skeleton依赖B 此处填写b.skeleton的GROUP_ID',
DEPEN_ON_ARTIFACT_ID	VARCHAR(50) comment	'被依赖模块的ARTIFACT_ID',
DEPEN_ON_VERSION	VARCHAR(50),
STATUS	CHAR(1)	 comment '0: 使用中 1: 未使用',
CREATE_TIME	TIMESTAMP, 	 	 
UPDATE_TIME	TIMESTAMP
);


-- 11 循环依赖关系表（T_CIRCLE_DEPENDENCE)

CREATE TABLE T_CIRCLE_DEPENDENCE(
ID	INT(8)	  primary key  auto_increment	comment'表示一个循环依赖闭环ID' ,
DEPENDENCE_ID	VARCHAR(500)	comment '单项依赖关系ID',
TYPE	CHAR(20)	comment '0：WAR DEPENDENCE_ID数据来自 T_DEPEN_ANALYSIS 1：JAR DEPENDENCE_ID数据来自 T_APP_DEPENDENCES',
STATUS	CHAR(1)	 COMMENT '0: 使用中 1: 未使用',
CREATE_TIME	TIMESTAMP,
UPDATE_TIME	TIMESTAMP	
);

--12 模块关系手工维护依赖表  T_APP_MAN_DEPENDENCES
CREATE TABLE T_APP_MAN_DEPENDENCES(
APP_MAN_ID INT(8) PRIMARY KEY auto_increment not NULL,
GROUP_ID  VARCHAR(50) comment '依赖模块的GROUP_ID',
ARTIFACT_ID VARCHAR(50) comment '依赖模块的ARTIFACT',
VERSION VARCHAR(50)   comment '依赖模块的VERSION',
DEPEN_GROUP_ID	VARCHAR(50)	comment '被依赖模块的GROUP_ID',
DEPEN_ARTIFACT_ID	VARCHAR(50)	 comment '被依赖模块的ARTIFACT_ID', 	
DEPEN_VERSION VARCHAR(50) comment '被依赖模块的VERSION' ,            
ROLE char(1) comment '依赖者和被依赖者的关系 C:消费者（依赖者是被依赖者的消费者）P:生产者（依赖者是被依赖者的生产者'
);


--13 maven解析出来的依赖关系
CREATE TABLE M_DEPEN_ANALYSIS (
  ID INT(20) NOT NULL AUTO_INCREMENT COMMENT '依赖数据ID',
  CURR_PROJECT_GROUP_ID varchar(50) DEFAULT NULL COMMENT '当前项目的groupId',
  CURR_PROJECT_ARTIFACT varchar(50) DEFAULT NULL COMMENT '当前项目的artifact',
  CURR_PROJECT_VERSION varchar(50) DEFAULT NULL COMMENT '当前项目的version',
  CURR_NODE_GROUP_ID varchar(50) DEFAULT NULL COMMENT '当前节点的groupId',
  CURR_NODE_ARTIFACT varchar(50) DEFAULT NULL COMMENT '当前节点的artifact',
  CURR_NODE_VERSION varchar(50) DEFAULT NULL COMMENT '当前节点的version',
  CURR_NODE_PARENT_GROUP_ID varchar(50) DEFAULT NULL COMMENT '当前节点的父节点的groupId',
  CURR_NODE_PARENT_ARTIFACT varchar(50) DEFAULT NULL COMMENT '当前节点的父节点的artifact',
  CURR_NODE_PARENT_VERSION varchar(50) DEFAULT NULL COMMENT '当前节点的父节点的version',
  PRIMARY KEY (id)
);